#!/bin/bash

NC="\033[0m"
BOLD="\033[1m"
ULINE="\033[4m"
RED="\033[31m"
GREEN="\033[32m"
YELLOW="\033[33m"
BLUE="\033[34m"
MAGENTA="\033[35m"

fatal_error()
{
	if [ -z "$1" ]
	then
		message="fatal error"
	else
		message="$1"
	fi
	if [ -z "$2" ]
	then
		exit_status=1
	else
		exit_status=$2
	fi
	printf "${RED}$message${NC}\n"
	exit $exit_status
}

cd "$(dirname "$0")"

printf "+------------------------------------------------------------------------------+\n"
printf "|                                                                              |\n"
printf "|                                                                              |\n"
printf "|                           ${ULINE}${MAGENTA}PIPEX TESTER${NC} by ${YELLOW}vfurmane${NC}                           |\n"
printf "|                                                                              |\n"
printf "|                                                                              |\n"
printf "+------------------------------------------------------------------------------+\n"
printf "\n\n"

ONLY_CONFIG=0

# Parse arguments
while [ $# -gt 0 ]
do
	case $1 in
		-c|--config)
			ONLY_CONFIG=1
		shift;;
		*)
		fatal_error "Unknown argument '$1'";;
	esac
done

# Config
if ! [ -f config.vars ]
then
	printf "\t${BOLD}Configuration${NC}\n\n"
	printf "The project directory (default: ../pipex): "
	read project_directory
	if [ -z "$project_directory" ]
	then
		project_directory="../pipex"
	fi

	echo "# This file was automatically generated by the pipex-tester" > config.vars
	echo "# https://github.com/vfurmane/pipex-tester" >> config.vars
	echo >> config.vars
	echo "PROJECT_DIRECTORY='$project_directory'" >> config.vars
fi

if [ $ONLY_CONFIG -gt 0 ]
then
	exit 0
fi

if ! [ -x "config.vars" ]
then
	fatal_error "The config.vars file is not executable...\nTry \`chmod +x config.vars\`"
fi

. config.vars
mkdir -p outs

printf "\n"
printf "\t${BOLD}Tests${NC}\n\n"

# TEST 01
num="01"
description="The program compiles"
printf "${BLUE}# $num: %-69s  []${NC}" "$description"
make -C "$PROJECT_DIRECTORY" > outs/test-01.txt 2>&1
if [ $? -eq 0 ]
then
	result="OK"
	result_color=$GREEN
else
	result="KO"
	result_color=$RED
fi
printf "\r${result_color}# $num: %-69s [%s]\n${NC}" "$description" "$result"

# TEST 02
num="02"
description="The program is executable as ./pipex"
printf "${BLUE}# $num: %-69s  []${NC}" "$description"
if [ -x $PROJECT_DIRECTORY/pipex ]
then
	result="OK"
	result_color=$GREEN
else
	result="KO"
	result_color=$RED
fi
printf "\r${result_color}# $num: %-69s [%s]\n${NC}" "$description" "$result"

# TEST 03
num="03"
description="The program do not crash with no parameters"
printf "${BLUE}# $num: %-69s  []${NC}" "$description"
$PROJECT_DIRECTORY/pipex > outs/test-03-tty.txt 2>&1
if [ $? -lt 126 ] # 126 is the lowest code that bash uses for errors
then
	result="OK"
	result_color=$GREEN
else
	result="KO"
	result_color=$RED
fi
printf "\r${result_color}# $num: %-69s [%s]\n${NC}" "$description" "$result"

# TEST 04
num="04"
description="The program do not crash with one parameter"
printf "${BLUE}# $num: %-69s  []${NC}" "$description"
$PROJECT_DIRECTORY/pipex "texts/deepthought.txt" > outs/test-04-tty.txt 2>&1
if [ $? -lt 126 ] # 126 is the lowest code that bash uses for errors
then
	result="OK"
	result_color=$GREEN
else
	result="KO"
	result_color=$RED
fi
printf "\r${result_color}# $num: %-69s [%s]\n${NC}" "$description" "$result"

# TEST 05
num="05"
description="The program do not crash with two parameters"
printf "${BLUE}# $num: %-69s  []${NC}" "$description"
$PROJECT_DIRECTORY/pipex "texts/deepthought.txt" "grep Now" > outs/test-05-tty.txt 2>&1
if [ $? -lt 126 ] # 126 is the lowest code that bash uses for errors
then
	result="OK"
	result_color=$GREEN
else
	result="KO"
	result_color=$RED
fi
printf "\r${result_color}# $num: %-69s [%s]\n${NC}" "$description" "$result"

# TEST 06
num="06"
description="The program do not crash with 3 parameters"
printf "${BLUE}# $num: %-69s  []${NC}" "$description"
$PROJECT_DIRECTORY/pipex "texts/deepthought.txt" "grep Now" "wc -w" > outs/test-06-tty.txt 2>&1
if [ $? -lt 126 ] # 126 is the lowest code that bash uses for errors
then
	result="OK"
	result_color=$GREEN
else
	result="KO"
	result_color=$RED
fi
printf "\r${result_color}# $num: %-69s [%s]\n${NC}" "$description" "$result"

# TEST 07
num="07"
description="The program handles a basic command"
printf "${BLUE}# $num: %-69s  []${NC}" "$description"
$PROJECT_DIRECTORY/pipex "texts/deepthought.txt" "grep Now" "wc -w" "outs/test-07.txt" > outs/test-07-tty.txt 2>&1
if [ $? -eq 0 ]
then
	result="OK"
	result_color=$GREEN
else
	result="KO"
	result_color=$RED
fi
printf "\r${result_color}# $num: %-69s [%s]\n${NC}" "$description" "$result"

# TEST 08
num="08"
description="The output of the basic command is correct"
printf "${BLUE}# $num: %-69s  []${NC}" "$description"
$PROJECT_DIRECTORY/pipex "texts/deepthought.txt" "grep Now" "wc -w" "outs/test-08.txt" > outs/test-08-tty.txt 2>&1
< texts/deepthought.txt grep Now | wc -w > outs/test-08-original.txt 2>&1
if diff outs/test-08-original.txt outs/test-08.txt > /dev/null 2>&1
then
	result="OK"
	result_color=$GREEN
else
	result="KO"
	result_color=$RED
fi
printf "\r${result_color}# $num: %-69s [%s]\n${NC}" "$description" "$result"
